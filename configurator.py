#!/usr/bin/python
import json
import re
import os
import shutil
import sys
import argparse


language_string_dict: dict = json.load(open("configurator.lang/en.json", "r", encoding="utf-8"))


def _(s: str) -> str:
    """
    i18n method
    """
    return language_string_dict.get(s, s)


parser = argparse.ArgumentParser(
    description="This program can guide you through the process of configuring Neutron."
)

parser.add_argument(
    "-c",
    "--config-file",
    help="File path of the config JSON generated by a past run of this program.",
    required=False,
)
parser.add_argument(
    "-k",
    "--keep-build-dir",
    help="Don't clear the build folder.",
    required=False,
    action="store_true",
)
parser.add_argument(
    "-l",
    "--language",
    help="Specify the language for prompt information.",
    required=False,
)


def main(args: argparse.Namespace):

    if args.language:
        global language_string_dict

        try:
            with open("configurator.lang/{}.json".format(args.language), "r", encoding="utf-8") as f:
                language_string_dict.update(json.load(f))
        except FileNotFoundError:
            print(_("ERR-LANGFILE-NOT-FOUND"), *[os.path.splitext(i)[0] for i in os.listdir("configurator.lang")])
            exit(1)

    if not args.config_file:
        appinfo = {}
        appinfo["appName"] = input(_("INPUT-APPNAME"))
        appinfo["internalAppName"] = appinfo["appName"].replace(" ", "-").lower()
        appinfo["url"] = input(_("INPUT-APP-URL"))
        appinfo["logoSvgFilePath"] = os.path.abspath(input(_("INPUT-LOGOSVG-PATH")))

        while True:
            try:
                appinfo["platforms"] = json.loads(
                    '{"array":' + input(_("INPUT-BUILD-PLATFORMS")).lower() + "}"
                )["array"]
                break
            except json.JSONDecodeError:
                print(_("ERR-INVALID-PLATFORM"))

        answer = input(_("INPUT-IS-EXTENSION-INSTALLED")).lower()
        if answer in ("yes", "y"):
            try:
                appinfo["extensionURLs"] = json.loads(
                    '{"array":' + input(_("INPUT-EXTENSION-URLS")) + "}"
                )["array"]
            except json.JSONDecodeError:
                print(_("ERR-INVALID-EXTENSION-URL"))
                appinfo["extensionURLs"] = []

        appinfo["version"] = input(_("INPUT-VERSION"))
        appinfo["projectURL"] = input(_("INPUT-PROJECT-URL"))
        appinfo["projectHelpURL"] = input(_("INPUT-PROJECT-HELP-URL"))

        while True:
            answer = input(_("INPUT-ALLOW-OPEN-LINKS")).lower()
            if answer in ("yes", "y"):
                appinfo["openInDefaultBrowser"] = True
                if not shutil.which("web-ext"):
                    print(_("ERR-MISSING-WEBEXT"))
                    break

                while True:
                    appinfo["openInDefaultBrowserRegex"] = input(
                        _("INPUT-NOT-OPEN-LINKS-REGEX")
                    )
                    try:
                        pattern = re.compile(appinfo["openInDefaultBrowserRegex"])
                        if not pattern.match(appinfo["url"]):
                            print(_("ERR-REGEX-SELFREF"))
                            continue
                        break
                    except:
                        print(_("ERR-INVALID-REGEX"))
                        continue
                break
            elif answer in ("n", "no"):
                appinfo["openInDefaultBrowser"] = False
                break

        while True:
            answer = input(_("INPUT-IS-RUN-BACKGROUND"))
            if answer in ("y", "yes"):
                appinfo["runInBackground"] = True
                break

            elif answer in ("n", "no"):
                appinfo["runInBackground"] = False
                break

    else:
        with open(args.config_file, "r") as f:
            appinfo = json.load(f)

    if not args.keep_build_dir:
        if os.path.exists("build"):
            print(_("TIP-CLEAR-BUILD-FOLDER"))
            shutil.rmtree("build")

        os.mkdir("build")

    shutil.copyfile("src/scripts/build.py", "build/build.py")
    shutil.copytree("src", "build/src", dirs_exist_ok=True)

    with open("build/config.json", "w") as f:
        json.dump(appinfo, f, indent=4)

    print(_("TIP-DONE"))

    return


if __name__ == "__main__":
    args = parser.parse_args()
    main(args)
